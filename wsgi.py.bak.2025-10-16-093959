import importlib

# 1) 嘗試從套件/模組載入現成 app
candidates_has_app = [
    "app",           # 套件 app/__init__.py 或模組 app.py
    "ticketsearch",  # 若你的套件名就是 repo 名稱
    "server",
    "main",
]
app = None
app.url_map.strict_slashes = False
for mod in candidates_has_app:
    try:
        m = importlib.import_module(mod)
        if hasattr(m, "app"):
            app = getattr(m, "app")
            break
    except Exception:
        pass

# 2) 嘗試工廠模式 create_app()
if app is None:
    factories = [
        ("app", "create_app"),
        ("ticketsearch", "create_app"),
        ("server", "create_app"),
        ("main", "create_app"),
    ]
    for mod, fn in factories:
        try:
            m = importlib.import_module(mod)
            if hasattr(m, fn):
                app = getattr(m, fn)()
                break
        except Exception:
            pass

if app is None:
    raise RuntimeError("Cannot locate Flask app. Please ensure app = Flask(...) or create_app() exists.")

# 3) 掛上 healthz 藍圖與根路由
try:
    from healthz import bp as health_bp
    # 根路由 "/" 與 "/healthz" 都由這個 blueprint 提供
    app.register_blueprint(health_bp)
except Exception as e:
    # 不讓健康檢查阻擋主服務啟動
    pass

# --- inline minimal diagnostics (bypass blueprint/import issues) ---
import os, socket, datetime
from flask import Response, jsonify

@app.get("/h")
def _h():
    return Response("ok\n", status=200, mimetype="text/plain")

@app.get("/healthz")
def _healthz_inline():
    payload = {
        "status": "ok",
        "service": "ticketsearch",
        "time": datetime.datetime.utcnow().isoformat()+"Z",
        "host": socket.gethostname(),
        "region": os.environ.get("REGION","asia-east1"),
        "project": os.environ.get("GOOGLE_CLOUD_PROJECT") or os.environ.get("PROJECT_ID"),
        "revision": os.environ.get("K_REVISION"),
        # 刻意不做 git/IO 以避免出錯
    }
    return jsonify(payload), 200

@app.get("/__routes_wsgi")
def _routes_wsgi():
    try:
        rules = []
        for r in sorted(app.url_map.iter_rules(), key=lambda x: x.rule):
            meth = sorted(m for m in (getattr(r, "methods", []) or []) if m not in ("HEAD","OPTIONS"))
            rules.append({"rule": r.rule, "methods": meth})
        return jsonify({"count": len(rules), "routes": rules}), 200
    except Exception as e:
        return jsonify({"count": 0, "routes": [], "note": f"routes_inline_error:{type(e).__name__}:{e}"}), 200
